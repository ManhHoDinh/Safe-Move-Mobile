# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

require 'dotenv'
project_number = nil
ios_app_id = nil
apple_id = nil
git_url = nil
ios_bundle_id = nil
service_account_file = nil
service_account_key_file = '../service_account_key/'
one_signal_app_id = nil

platform :ios do

  before_all do
    Dotenv.overload '../../.env'
    environment = lane_context[SharedValues::ENVIRONMENT]
    unless environment.nil?
        Dotenv.overload '../../.env.' + environment
    end
    project_number = ENV['FIREBASE_PROJECT_NUMBER']
    ios_app_id = ENV['IOS_APP_ID']
    apple_id = ENV['APPLE_ID']
    git_url = ENV['PROVISIONING_GIT_URL']
    ios_bundle_id = ENV['IOS_BUNDLE_ID']
    service_account_file = ENV['SERVICE_ACCOUNT_FILE']
    service_account_key_file = service_account_key_file + service_account_file
    one_signal_app_id = ios_bundle_id + ".OneSignalNotificationServiceExtension"
  end

  lane :matchsetup do
    match(
        app_identifier: [ios_bundle_id, one_signal_app_id],
        git_url: git_url,
        type: "adhoc",
        git_branch: "main",
        readonly: false,
        force: false,
        username: apple_id,
        force_for_new_devices: true
    )
  end

  lane :device do
    firebase_app_distribution_get_udids(
        app: ios_app_id,
        service_credentials_file: service_account_key_file,
        output_file: "../ios_uids/ios_uids.txt"
    )

    register_devices(
      devices_file: '../ios_uids/ios_uids.txt',
      username: apple_id
    )

    match(
      app_identifier: [ios_bundle_id, one_signal_app_id],
      git_url: git_url,
        type: "adhoc",
        git_branch: "main",
        readonly: false,
        force: false,
        username: apple_id,
        force_for_new_devices: true
    )
  end

  lane :beta do
    match(
      app_identifier: [ios_bundle_id, one_signal_app_id],
      git_url: git_url,
        type: "adhoc",
        git_branch: "main",
        readonly: true,
        force: false,
        username: apple_id,
    )

    clean_build_artifacts

    build_app(
        scheme: "Runner",
        archive_path: "./build/Runner.xcarchive",
        export_method: "ad-hoc",
        configuration: "Release",
        output_directory: "./build/Runner"
    )

    firebase_app_distribution_create_group(
        project_number: project_number,
        display_name:"testers",
        service_credentials_file: service_account_key_file,
        alias:"testers"
    )

    firebase_app_distribution_create_group(
        project_number: project_number,
        display_name:"clients",
        service_credentials_file: service_account_key_file,
        alias:"clients"
    )

    firebase_app_distribution(
        app: ios_app_id,
        ipa_path: "./build/Runner/Runner.ipa",
        service_credentials_file: service_account_key_file,
        groups: "testers",
        release_notes_file: "../release_note/release_note.txt"
    )
  end
end
